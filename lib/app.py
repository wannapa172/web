from flask import Flask, request, jsonify, render_template
from flask_pymongo import PyMongo
from flask_jwt_extended import JWTManager, create_access_token, jwt_required, get_jwt_identity
import bcrypt
import logging

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Log
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Flask app
app = Flask(__name__)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ MongoDB
app.config['MONGO_URI'] = "mongodb+srv://wannapaba:RGuj6SpDJ82OzzwN@webtamroidb.uwbym.mongodb.net/webtamroidb?retryWrites=true&w=majority"
app.config['JWT_SECRET_KEY'] = "supersecretkey"  # ‡∏Ñ‡∏µ‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT Token
mongo = PyMongo(app)
jwt = JWTManager(app)

db = mongo.db  # ‡πÉ‡∏ä‡πâ `mongo.db` ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `mongo.db.posts`
logging.info(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB: {app.config['MONGO_URI']}")

### ‚úÖ **1. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å**
@app.route('/')
def home():
    logging.info("‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    posts = list(db['posts'].find({}, {"_id": 0}))  # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á collection ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return render_template('Home.html', posts=posts)

### ‚úÖ **2. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå**
@app.route('/post')
def post_page():
    logging.info("‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return render_template('post.html')

### ‚úÖ **3. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login**
@app.route('/login_page')
def login_page():
    logging.info("‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    return render_template('login.html')

@app.route('/register_page')
def register_page():
    return render_template('register.html')

### ‚úÖ **4. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Register)**
@app.route('/register', methods=['POST'])
def register():
    data = request.json
    username = data.get('username')
    email = data.get('email')
    password = data.get('password')

    if not username or not email or not password:
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}), 400

    existing_user = db['register'].find_one({"email": email})
    if existing_user:
        return jsonify({"error": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}), 400

    # ‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á MongoDB
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

    user_data = {
        "username": username,
        "email": email,
        "password": hashed_password.decode('utf-8')  # ‡πÄ‡∏Å‡πá‡∏ö bcrypt hash ‡πÄ‡∏õ‡πá‡∏ô string
    }
    db['register'].insert_one(user_data)
    return jsonify({"message": "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}), 201

### ‚úÖ **5. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô (Login)**
@app.route('/login', methods=['POST'])
def login():
    try:
        data = request.json
        email = data.get('email')
        password = data.get('password')

        if not email or not password:
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}), 400

        user = db['register'].find_one({"email": email})

        if not user:
            return jsonify({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}), 400

        stored_password = user.get('password')

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ stored_password ‡πÄ‡∏õ‡πá‡∏ô bcrypt hash ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not stored_password.startswith("$2b$"):
            return jsonify({"error": "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà"}), 400

        if bcrypt.checkpw(password.encode('utf-8'), stored_password.encode('utf-8')):
            access_token = create_access_token(identity={"email": user['email'], "username": user['username']})
            return jsonify({
                "message": "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
                "token": access_token,
                "user": {"username": user["username"], "email": user["email"]}
            }), 200
        else:
            return jsonify({"error": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}), 400

    except Exception as e:
        return jsonify({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: {str(e)}"}), 500


### ‚úÖ **6. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô**
@app.route('/profile', methods=['GET'])
@jwt_required()
def profile():
    current_user = get_jwt_identity()
    return jsonify({
        "username": current_user["username"],
        "email": current_user["email"]
    }), 200


### ‚úÖ **7. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤**
@app.route('/submit', methods=['POST'])
def submit_post():
    data = request.json
    logging.info(f"‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå: {data}")
    
    category = data.get('category')
    title = data.get('title')
    content = data.get('content')
    image_url = data.get('image_url')  # ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ Cloud Storage)
    
    if not category or not title or not content:
        logging.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}), 400
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
    post_data = {
        "category": category,
        "title": title,
        "content": content,
        "image_url": image_url
    }
    post_id = db['posts'].insert_one(post_data).inserted_id  # ‡πÉ‡∏ä‡πâ `db['posts']` ‡πÅ‡∏ó‡∏ô `db.posts`
    logging.info(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MongoDB ID: {post_id}")
    
    return jsonify({"message": "‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "post_id": str(post_id)})

### ‚úÖ **8. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î**
@app.route('/get_posts', methods=['GET'])
def get_posts():
    logging.info("‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    posts = list(db['posts'].find({}, {"_id": 0}))  # ‡πÉ‡∏ä‡πâ `db['posts']` ‡πÅ‡∏ó‡∏ô `db.posts`
    return jsonify(posts)

### ‚úÖ **9. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏° ID**
@app.route('/post/<post_id>')
def post_detail(post_id):
    from bson.objectid import ObjectId

    logging.info(f"‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π‡πÇ‡∏û‡∏™‡∏ï‡πå ID: {post_id}")
    post = db['posts'].find_one({"_id": ObjectId(post_id)}, {"_id": 0})  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö ID
    
    if not post:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå", 404
    
    return render_template('post_detail.html', post=post)

### ‚úÖ **10. Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà**
@app.route('/get_posts_by_category', methods=['GET'])
def get_posts_by_category():
    category = request.args.get('category')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏à‡∏≤‡∏Å Query Parameter
    if not category:
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ category"}), 400

    logging.info(f"‡∏î‡∏∂‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category}")

    posts = list(db['posts'].find({"category": category}, {"_id": 0}))  # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö category
    if not posts:
        return jsonify({"message": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ"}), 404

    return jsonify(posts)




@app.route('/check_login', methods=['GET'])
@jwt_required(optional=True)
def check_login():
    current_user = get_jwt_identity()
    if current_user:
        return jsonify({"logged_in": True, "user": current_user}), 200
    else:
        return jsonify({"logged_in": False}), 200
    
from flask_jwt_extended import get_jwt

# ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö (Blacklist JWT Token)
@app.route('/logout', methods=['POST'])
@jwt_required()
def logout():
    jti = get_jwt()["jti"]  # ‡∏î‡∏∂‡∏á Token ID (JWT ID)
    
    # üöÄ ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö Token ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á Database (Blacklist)
    # db['token_blacklist'].insert_one({"jti": jti})

    return jsonify({"message": "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}), 200





if __name__ == '__main__':
    logging.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå Flask")
    app.run(debug=True)
